{"version":3,"file":"static/js/106.cfde1a6a.chunk.js","mappings":"+PACA,EAA8B,0BAA9B,EAAiH,uB,SCqDjH,EA7CiB,WACb,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAc,mCAAG,WAAOV,GAAP,uFAEfM,GAAa,GAFE,UAISK,EAAAA,EAAAA,IAAgBX,GAJzB,OAITY,EAJS,OAKfR,EAAgBQ,EAAUC,MALX,gDAQfL,EAAS,KAAIM,SARE,yBAUfR,GAAa,GAVE,4EAAH,sDAcpBI,EAAeV,EAElB,GAAE,CAACA,KAGA,qBAASe,UAAWC,EAApB,UACKT,EAAMU,OAAS,IACZ,wDAAgCV,KAEnCF,IAAa,SAACa,EAAA,EAAD,IACbf,GAAgBA,EAAagB,KAAI,SAAAN,GAC9B,OACI,2BACI,gBAAKO,IAAKP,EAAKQ,aAAL,yCAAsDR,EAAKQ,cAAiB,GAAIC,IAAI,QAAQC,MAAM,SAC5G,eAAGR,UAAWC,EAAd,UAA6BH,EAAKW,cAAlC,QACA,0BAAG,sCAAH,IAAsBX,EAAKY,eAHtBZ,EAAKa,GAMrB,MAIZ,C","sources":["webpack://goit-react-hw-05-movies/./src/pages/Cast/Cast.module.css?cfbb","pages/Cast/CastPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castSection\":\"Cast_castSection__DL5ZV\",\"characterTitle\":\"Cast_characterTitle__E31eA\",\"castName\":\"Cast_castName__51zqr\"};","import Loader from 'components/Loader/Loader';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'services/api';\nimport css from './Cast.module.css';\n\n\n\n\nconst CastPage = () => {\n    const { movieId } = useParams();\n    const [movieCredits, setMovieCredits] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        const fetchMovieCast = async (movieId) => {\n            try {\n                setIsLoading(true);\n\n                const movieCast = await getMovieCredits(movieId);\n                setMovieCredits(movieCast.cast);\n\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchMovieCast(movieId);\n        // eslint-disable-next-line\n    }, [movieId]);\n\n    return (\n        <section className={css.castSection}>\n            {error.length > 0 && (\n                <p>Upss, Some error occured... {error}</p>\n            )}\n            {isLoading && <Loader />}\n            {movieCredits && movieCredits.map(cast => {\n                return (\n                    <li key={cast.id}>\n                        <img src={cast.profile_path ? `https://image.tmdb.org/t/p/w500${cast.profile_path}` : \"\"} alt=\"actor\" width=\"150\" />\n                        <p className={css.castName}>{cast.original_name} </p>\n                        <p><b>Character:</b> {cast.character}</p>\n                    </li>\n                )\n            }\n            )}\n        </section>\n    )\n}\n\nexport default CastPage;"],"names":["movieId","useParams","useState","movieCredits","setMovieCredits","isLoading","setIsLoading","error","setError","useEffect","fetchMovieCast","getMovieCredits","movieCast","cast","message","className","css","length","Loader","map","src","profile_path","alt","width","original_name","character","id"],"sourceRoot":""}